swirl()
library("swirl")
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
getwd() <- old.dir
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1','folder2')
play()
file.list()
list.files()
?file.path
nxt()
?dir.create
dir.create("~/testdir2/testdir3",showWarnings=TRUE,recursive=TRUE,mode="0777")
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
setwd() <- old.dir
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
play()
?along.with
??along.with
?along
nxt()
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2) times=10)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- vector(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name<-c(my_char,"Lindsey")
my_name
paste(my_name)
paste(my_name, collapse(" "))
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3,c("X", "Y", "Z"), sep ="")
paste(LETTERS,1:4, sep=-'')
paste(LETTERS,1:4, sep='-')
ls
debug(ls)
ls
ls()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(c(3,4,5))
vct <- makeVector(c(3,4,5))
cachemean(vct)
vct2 <- makeVector(c(1,2,3))
cachemean(vct2)
?<--
x = matrix()
x
my_matrix <- matrix(1:6, nrow=2, ncol=3)
my_matrix
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(my_matrix)
solve(my_matrix)
my_matrix <- matrix(1:9, nrow=3, ncol=3)
solve(my_matrix)
?solve
my_matrix
my_matrix <- matrix(c(3,3,3,6,6,6,10,10,10), nrow=3, ncol=3)
my_matrix
solve(my_matrix)
my_matrix <- matrix(c(4,7,9,2,5,7,1,4,6), nrow=3, ncol=3)
my_matrix
solve(my_matrix)
my_matrix <- matrix(c(1,3,3,1,4,3,1,3,4), nrow=3, ncol=3)
solve(my_matrix)
my_matrix
my_matrix <- matrix(c(1,1,1,3,4,3,3,3,4), nrow=3, ncol=3)
solve(my_matrix)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
makeCacheMatrix(my_matrix)
cacheSolve(makeCacheMatrix(my_matrix))
?m
m
makeCacheMatrix(my_matrix)$i
makeCacheMatrix(my_matrix)$setinverse
cacheSolve(makeCacheMatrix(my_matrix))
debug(cacheSolve(makeCacheMatrix(my_matrix)))
debug(cacheSolve)
cacheSolve(makeCacheMatrix(my_matrix))
cacheSolve(makeCacheMatrix(my_matrix))
cache <- makeCacheMatrix(my_matrix)
cacheSolve(cache)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace=FALSE)
sample(1:20, 10)
?LETTERS
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
rbinom(100,size=1,prob=0.7)
flips2 <- rbinom(100,size=1,prob=0.7)
flips2
sum(heads)
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5,lambda=10)
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = Speed, y = cars$dist)
?splot
?plot
plot(x = cars$speed, y = cars$dist, xlab="Speed")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
?plot
plot(cars, main="My Plot")
plot?
?plot
plot(cars, sub="My Plot Subtitle")
?par
plot(cars,col=2)
plot(cars,xlim=c(10,15))
?points
plot(cars,pch=2)
data(mtcars)
play()
dim(mtcars)
head(mtcars)
summary(mtcars)
table(mtcars)
names(mtcars)
nxt()
?boxplot
boxplot(mpg ~ cyl, data=mtcars)
hist(mtcars$mpg)
x <- rnom(10)
x <- rnorm(10)
x
x <- rnorm(10, 20, 2)
x
?rnorm
summary(x)
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
rpois(10,1)
rpois(10,2)
rpois(10,20)
ppois (2,2)
ppois (4,2)
ppois (6,2)
set.seed(20) ##set seed
x <- rnorm(100) ##generate x, the predictor, which has standard normal distribution
e <- rnorm(100,0,2) ##generate e, which has a normal distribution with mean 0 and sd 2
y <- 0.5 + 2 * x + e ##then add everything together, multiplying and adding regression coefficients
summary(y)
plot(x,y)
x <- rbinom(100, 1, 0.5) ##generate x, the predictor, which has standard normal distribution
e <- rbinom(100, 0, 2) ##generate e, which has a normal distribution with mean 0 and sd 2
y <- 0.5 + 2 * x + e ##then add everything together, multiplying and adding regression coefficients
summary(y)
set.seed(20) ##set seed
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3*x
y <- rpois(100, exp(log.mu))
summary(x,y)
plot(x,y)
set.seed(1)
sample(1:10,4)
sample(1:10,4)
sample(letters,5)
sample(1:10)
sample(1:10)
sample(1:10, replace=TRUE)
system.time(readLines("http://www.jhsph.edu"))
hilbert <- function(n){
i <- 1:n
1 / outer(i-1, i, "+")
}
x <- hilbert(1000)
system.time(svd(x))
system.time({
n <-1000
r <- numeric(n)
for(i in 1:n){
x <- rnorm(n)
r[i] <- mean(x)
}
})
Rprof()
lm(y ~ x)
y <- 100
x <- 10
lm(y ~ x)
y <- c(rep(2,50))
x <- c(rep(5,50))
lm(y ~ x)
x <- c(4,5,7,9)
lm(y ~ x)
x <- c(rep(c(1,4,5,7,9),10))
lm(y ~ x)
Rprof(lm(y ~ x))
Rprof()
?Rprof()
Rprof(makeVector.r)
Rprof(/makeVector.r)
getwd()
setwd("/Users/lindseyhandley/R_Programming_Coursera/")
ls()
getwd()
setwd("/Users/lindseyhandley/R_Programming_Coursera/Assignment2/")
Rprof(makeVector.r)
Rprof("makeVector.r")
ls()
makeVector()
makeVector(c(1,2,3))
setwd("/Users/lindseyhandley/R_Programming_Coursera/")
ls
Rprof("simpleFunction.r")
Rprof("simpleFunction.r")
load("simpleFunction.r")
source("simpleFunction.r")
source("simpleFunction.r")
Rprof("simpleFunction.r")
simpleFunction(4)
Rprof("simpleFunction.r")
simpleFunction(4)
profvis::profvis({simpleFunction <- function(n){
n <-1000
r <- numeric(n)
for(i in 1:n){
x <- rnorm(n)
r[i] <- mean(x)
}
}})
simpleFunction(4)
Rprof("simpleFunction.r")
simpleFunction(4)
source("simpleFunction.r")
simpleFunction(4)
summaryRprof()
Rprof("profiling")
simpleFunction(4)
summaryRprof()
summaryRprof("")
summaryRprof("profiling_sum")
source("simpleFunction.r")
source("simpleFunction.r")
source("simpleFunction.r")
simpleFunction(4)
summaryRprof("profiling_sum")
Rprof(NULL)
x<-matrix(rnorm(1000000),1000,1000)
y<-solve(x)
summaryRprof()
set.seed(1)
rpois(5, 2)
x <- rep(0:1, each = 5)
x
